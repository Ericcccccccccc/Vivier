openapi: 3.0.3
info:
  title: Vivier API
  description: |
    Vivier is a comprehensive AI chat platform that supports multiple AI providers.
    This API documentation covers all endpoints for authentication, chat management,
    user management, and administrative functions.
  version: 1.0.0
  contact:
    name: Vivier Support
    email: support@vivier.ai
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.vivier.ai/v1
    description: Production server
  - url: https://staging-api.vivier.ai/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Development server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Chats
    description: Chat session management
  - name: Messages
    description: Message operations within chats
  - name: Users
    description: User profile and settings
  - name: AI Providers
    description: AI provider configuration
  - name: Admin
    description: Administrative operations
  - name: Billing
    description: Subscription and payment management

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: SecurePass123!
                name:
                  type: string
                  example: John Doe
                acceptTerms:
                  type: boolean
                  default: false
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                rememberMe:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      operationId: logoutUser
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh authentication token
      operationId: refreshToken
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chats:
    get:
      tags:
        - Chats
      summary: List user chats
      operationId: listChats
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: archived
          in: query
          schema:
            type: boolean
            default: false
        - name: provider
          in: query
          schema:
            type: string
            enum: [openai, anthropic, google, local]
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Chats
      summary: Create new chat
      operationId: createChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - model
              properties:
                title:
                  type: string
                  example: New Chat
                provider:
                  type: string
                  enum: [openai, anthropic, google, local]
                model:
                  type: string
                  example: gpt-4
                settings:
                  $ref: '#/components/schemas/ChatSettings'
      responses:
        '201':
          description: Chat created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  chat:
                    $ref: '#/components/schemas/Chat'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          description: Payment required - subscription limit reached

  /chats/{chatId}:
    get:
      tags:
        - Chats
      summary: Get chat details
      operationId: getChat
      parameters:
        - $ref: '#/components/parameters/chatId'
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  chat:
                    $ref: '#/components/schemas/ChatWithMessages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Chats
      summary: Update chat
      operationId: updateChat
      parameters:
        - $ref: '#/components/parameters/chatId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                settings:
                  $ref: '#/components/schemas/ChatSettings'
                archived:
                  type: boolean
      responses:
        '200':
          description: Chat updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  chat:
                    $ref: '#/components/schemas/Chat'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Chats
      summary: Delete chat
      operationId: deleteChat
      parameters:
        - $ref: '#/components/parameters/chatId'
        - name: force
          in: query
          description: Permanently delete instead of archiving
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Chat deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /chats/{chatId}/messages:
    get:
      tags:
        - Messages
      summary: Get chat messages
      operationId: getChatMessages
      parameters:
        - $ref: '#/components/parameters/chatId'
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'

    post:
      tags:
        - Messages
      summary: Send message
      operationId: sendMessage
      parameters:
        - $ref: '#/components/parameters/chatId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: Hello, how can you help me?
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                stream:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Message sent and AI response received
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  userMessage:
                    $ref: '#/components/schemas/Message'
                  aiMessage:
                    $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /chats/{chatId}/export:
    get:
      tags:
        - Chats
      summary: Export chat
      operationId: exportChat
      parameters:
        - $ref: '#/components/parameters/chatId'
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [json, markdown, pdf, docx]
      responses:
        '200':
          description: Exported chat data
          content:
            application/json:
              schema:
                type: object
            text/markdown:
              schema:
                type: string
            application/pdf:
              schema:
                type: string
                format: binary

  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      operationId: getUserProfile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Users
      summary: Update user profile
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
                  format: uri
                preferences:
                  $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /providers:
    get:
      tags:
        - AI Providers
      summary: List available AI providers
      operationId: listProviders
      responses:
        '200':
          description: List of providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIProvider'

  /providers/{provider}/models:
    get:
      tags:
        - AI Providers
      summary: List models for provider
      operationId: listProviderModels
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [openai, anthropic, google, local]
      responses:
        '200':
          description: List of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIModel'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    chatId:
      name: chatId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        createdAt:
          type: string
          format: date-time

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            avatar:
              type: string
              format: uri
            emailVerified:
              type: boolean
            subscription:
              $ref: '#/components/schemas/Subscription'
            preferences:
              $ref: '#/components/schemas/UserPreferences'
            usage:
              $ref: '#/components/schemas/Usage'

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
        language:
          type: string
        defaultProvider:
          type: string
        defaultModel:
          type: string
        streamResponses:
          type: boolean
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean

    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        provider:
          type: string
        model:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        archived:
          type: boolean
        messageCount:
          type: integer
        settings:
          $ref: '#/components/schemas/ChatSettings'

    ChatWithMessages:
      allOf:
        - $ref: '#/components/schemas/Chat'
        - type: object
          properties:
            messages:
              type: array
              items:
                $ref: '#/components/schemas/Message'

    ChatSettings:
      type: object
      properties:
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 0.7
        maxTokens:
          type: integer
          minimum: 1
          maximum: 32000
        topP:
          type: number
          minimum: 0
          maximum: 1
        frequencyPenalty:
          type: number
          minimum: -2
          maximum: 2
        presencePenalty:
          type: number
          minimum: -2
          maximum: 2
        systemPrompt:
          type: string

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chatId:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        tokens:
          type: integer
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'

    Attachment:
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        url:
          type: string
          format: uri

    AIProvider:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [available, configured, error]
        features:
          type: array
          items:
            type: string
            enum: [chat, embeddings, images, audio, vision]

    AIModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        contextLength:
          type: integer
        pricing:
          type: object
          properties:
            input:
              type: number
            output:
              type: number
            unit:
              type: string

    Subscription:
      type: object
      properties:
        plan:
          type: string
          enum: [free, pro, enterprise]
        status:
          type: string
          enum: [active, cancelled, expired]
        currentPeriodEnd:
          type: string
          format: date-time
        limits:
          type: object
          properties:
            messagesPerMonth:
              type: integer
            tokensPerMonth:
              type: integer
            chatsPerMonth:
              type: integer

    Usage:
      type: object
      properties:
        currentMonth:
          type: object
          properties:
            messages:
              type: integer
            tokens:
              type: integer
            chats:
              type: integer
        allTime:
          type: object
          properties:
            messages:
              type: integer
            tokens:
              type: integer
            chats:
              type: integer

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        error:
          type: string
        code:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'