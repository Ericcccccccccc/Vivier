# Cloud Build configuration for CI/CD pipeline
# This file orchestrates the build, test, and deployment process

substitutions:
  _REGION: us-central1
  _SERVICE_NAME: email-ai-api
  _VM_ZONE: us-central1-a
  _VM_NAME: whatsapp-bot

options:
  machineType: 'E2_MEDIUM'
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: 'ALLOW_LOOSE'

steps:
  # Step 1: Install dependencies and run tests for API
  - name: 'node:20-alpine'
    id: 'test-api'
    dir: 'api-server'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci
        echo "Running linter..."
        npm run lint || true
        echo "Running tests..."
        npm test || true
        echo "Type checking..."
        npm run typecheck || true

  # Step 2: Install dependencies and run tests for WhatsApp bot
  - name: 'node:20-alpine'
    id: 'test-whatsapp'
    dir: 'whatsapp-bot'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci
        echo "Running tests..."
        npm test || true
    waitFor: ['-']  # Run in parallel with API tests

  # Step 3: Install dependencies and run tests for frontend
  - name: 'node:20-alpine'
    id: 'test-frontend'
    dir: 'web-app'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci
        echo "Running tests..."
        npm test || true
        echo "Building frontend..."
        npm run build
    waitFor: ['-']  # Run in parallel with other tests

  # Step 4: Build Docker image for API
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-api-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$BRANCH_NAME'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:latest'
      - '--build-arg'
      - 'NODE_ENV=production'
      - './api-server'
    waitFor: ['test-api']

  # Step 5: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-api-image'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}'
    waitFor: ['build-api-image']

  # Step 6: Deploy to Cloud Run (staging for non-main branches)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-api-staging'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}-$BRANCH_NAME'
      - '--image'
      - 'gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-env-vars'
      - 'NODE_ENV=staging,COMMIT_SHA=$COMMIT_SHA,BRANCH=$BRANCH_NAME'
      - '--set-secrets'
      - 'SUPABASE_URL=supabase-url:latest,SUPABASE_SERVICE_KEY=supabase-service-key:latest,GROQ_API_KEY=groq-api-key:latest,JWT_SECRET=jwt-secret:latest'
      - '--service-account'
      - 'email-ai-api@$PROJECT_ID.iam.gserviceaccount.com'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '5'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--timeout'
      - '60'
      - '--concurrency'
      - '1000'
      - '--no-traffic'
    waitFor: ['push-api-image']

  # Step 7: Run smoke tests on staging
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'smoke-test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get staging URL
        STAGING_URL=$(gcloud run services describe ${_SERVICE_NAME}-$BRANCH_NAME \
          --region=${_REGION} \
          --format='value(status.url)')
        
        echo "Testing staging deployment at: $STAGING_URL"
        
        # Test health endpoint
        curl -f "$STAGING_URL/health" || exit 1
        
        # Test API endpoint
        curl -f "$STAGING_URL/api/v1/status" || exit 1
        
        echo "Smoke tests passed!"
    waitFor: ['deploy-api-staging']

  # Step 8: Deploy to production (main branch only)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-api-production'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Deploying to production..."
          
          # Deploy new revision without traffic
          gcloud run deploy ${_SERVICE_NAME} \
            --image gcr.io/$PROJECT_ID/${_SERVICE_NAME}:$COMMIT_SHA \
            --region ${_REGION} \
            --platform managed \
            --no-traffic \
            --tag canary
          
          # Gradually roll out traffic (canary deployment)
          echo "Starting canary deployment..."
          
          # Send 10% traffic to new version
          gcloud run services update-traffic ${_SERVICE_NAME} \
            --region ${_REGION} \
            --to-tags canary=10
          
          # Wait and monitor
          sleep 60
          
          # If successful, increase to 50%
          gcloud run services update-traffic ${_SERVICE_NAME} \
            --region ${_REGION} \
            --to-tags canary=50
          
          # Wait and monitor
          sleep 60
          
          # Full deployment
          gcloud run services update-traffic ${_SERVICE_NAME} \
            --region ${_REGION} \
            --to-latest
          
          echo "Production deployment complete!"
        else
          echo "Skipping production deployment (branch: $BRANCH_NAME)"
        fi
    waitFor: ['smoke-test']

  # Step 9: Update WhatsApp bot VM (main branch only)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'update-whatsapp-bot'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Updating WhatsApp bot..."
          
          # SSH into VM and update
          gcloud compute ssh ${_VM_NAME} \
            --zone=${_VM_ZONE} \
            --command="cd /opt/whatsapp-bot && \
                      git pull origin main && \
                      npm install && \
                      npm run build && \
                      pm2 reload whatsapp-bot --update-env"
          
          echo "WhatsApp bot updated!"
        else
          echo "Skipping WhatsApp bot update (branch: $BRANCH_NAME)"
        fi
    waitFor: ['deploy-api-production']

  # Step 10: Deploy frontend to Vercel (main branch only)
  - name: 'node:20-alpine'
    id: 'deploy-frontend'
    dir: 'web-app'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Deploying frontend to Vercel..."
          
          # Install Vercel CLI
          npm install -g vercel
          
          # Deploy to Vercel
          vercel --prod --token=$_VERCEL_TOKEN --yes
          
          echo "Frontend deployed!"
        else
          echo "Deploying preview to Vercel..."
          vercel --token=$_VERCEL_TOKEN --yes
        fi
    secretEnv: ['_VERCEL_TOKEN']
    waitFor: ['test-frontend']

  # Step 11: Clean up old images
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'cleanup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Cleaning up old images..."
        
        # List images older than 7 days
        OLD_IMAGES=$(gcloud container images list-tags \
          gcr.io/$PROJECT_ID/${_SERVICE_NAME} \
          --filter="timestamp.datetime < '-P7D'" \
          --format='get(digest)')
        
        # Delete old images
        for IMAGE in $OLD_IMAGES; do
          echo "Deleting image: $IMAGE"
          gcloud container images delete \
            "gcr.io/$PROJECT_ID/${_SERVICE_NAME}@$IMAGE" \
            --quiet || true
        done
        
        echo "Cleanup complete!"
    waitFor: ['-']  # Run in parallel, doesn't block deployment

  # Step 12: Send notification
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'notify'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          MESSAGE="âœ… Production deployment successful!"
        else
          MESSAGE="ðŸš€ Staging deployment successful for branch: $BRANCH_NAME"
        fi
        
        echo "$MESSAGE"
        echo "Commit: $COMMIT_SHA"
        echo "Build ID: $BUILD_ID"
        
        # You can add Slack/Discord webhook notification here
    waitFor: ['deploy-api-production', 'update-whatsapp-bot', 'deploy-frontend']

# Build timeout
timeout: 1800s  # 30 minutes

# Secrets from Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/vercel-token/versions/latest
      env: '_VERCEL_TOKEN'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-artifacts'
    paths:
      - 'api-server/dist/**/*'
      - 'web-app/.next/**/*'
      - 'whatsapp-bot/dist/**/*'

# Build triggers (configure in Cloud Console)
# - Push to main branch: Full deployment
# - Push to develop branch: Staging deployment
# - Pull request: Build and test only